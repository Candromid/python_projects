"""def find_item_in_dict(string, storage_dict):   # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    if string not in storage_dict:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞! –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ!")
        return None
    else:
        return storage_dict[string]

small_storage = {
    '–≥–≤–æ–∑–¥–∏': 5000,
    '—à—É—Ä—É–ø—ã': 3040,
    '—Å–∞–º–æ—Ä–µ–∑—ã': 2000
}

big_storage = {
    '–¥–æ—Å–∫–∏': 1000,
    '–±–∞–ª–∫–∏': 150,
    '—Ä–µ–π–∫–∏': 600
}

big_storage.update(small_storage) # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π

find_item = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ: ").lower()
output_from = find_item_in_dict(find_item, big_storage)

if output_from is not None:
    print(f"üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ {find_item}: {output_from} —à—Ç.")
"""
"""
# –ò–º–µ–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Ñ—Ä—É–∫—Ç–æ–≤ - –Ω–∞–∑–≤–∞–Ω–∏–µ : –ø—Ä–∏–±—ã–ª—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å, –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∏ —É–¥–∞–ª–∏—Ç—å –µ–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
incomes = {

    'apple': 5600.20,

    'orange': 3500.45,

    'banana': 5000.00,

    'bergamot': 3700.56,

    'durian': 5987.23,

    'grapefruit': 300.40,

    'peach': 10000.50,

    'pear': 1020.00,

    'persimmon': 310.00,

}

total_income = sum(incomes.values())  # —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print("–û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –≥–æ–¥ —Å–æ—Å—Ç–∞–≤–∏–ª {t_i} —Ä—É–±–ª–µ–π ".format(
    t_i = total_income
))

price_item = min(incomes.values()) # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
name_item = min(incomes, key = incomes.get) # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É)
print("–°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ—Ö–æ–¥ —É {n_i}. –û–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {p_i} —Ä—É–±–ª–µ–π".format(
    n_i = name_item,
    p_i = price_item
))

incomes.pop(name_item) # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
print("–ò—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å: ",incomes)
"""

def histogram(string):
    sym_dict = {}   # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
    for sym in string:  # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–¥–µ–ª—å–Ω–æ
        if sym in sym_dict:   # –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ +1, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç —Ç–æ —Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ 1
            sym_dict[sym] += 1
        else:
            sym_dict[sym] = 1

    return sym_dict  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å

text = input("–≤–≤–µ–¥–∏—Ç–µ —Å–∞–º —Ç–µ–∫—Å—Ç: ").lower()
hist = histogram(text)

for char in sorted(hist.keys()):  # –≤—ã–≤–æ–¥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ
    print(char, " - ", hist[char])

print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —É —Å–∏–º–≤–æ–ª–∞ {key_sym} - {value_of_key}".format(
    key_sym = max(hist, key = hist.get),  # –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–≥–æ –∫–ª—é—á–∞ ( —Ç–æ –µ—Å—Ç—å –∏–º—è / –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
    value_of_key = max(hist.values()) # –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Å—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
))
